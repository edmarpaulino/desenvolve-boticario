O que acontece quando usamos uma variável do tipo var antes da sua declaração?
Variáveis do tipo var sofrem com o efeito hoisting, no qual antes de executar seu código o JS lê ele por completo e declara as variáveis, ou seja, mesmo que você declare a variável após o uso dela, quando o código for executado ela já estará declarada antes da sua utilização.

O que acontece quando atribuímos valor a uma variável que não foi declarada?
O JS automaticamente cria a variável para nós, mas isso não é uma boa pratica e pode acarretar em bugs.

Quais as diferenças entre var, let e const?
Variáveis de tipo var possuem escopo global ou de função, ela é mais solta e até a versão de 2015 só existia este tipo de variável, já let e const possuem escopo global, local, de bloco e de função, a let é igual a var, só que você não pode declarar ela após o seu uso, já a const é uma variável constante, você precisa atribuir um valor a ela no momento da sua declaração, e durante a execução do programa essa variável é inalterável.

O que é o conceito de truthy e falsy?
Esse conceito é referente ao JS considerar variáveis como true ou false mesmo que não sejam do tipo booleano, ou seja, ele vai entender que 1 pode ser true e 0 pode ser false, ou null pode ser false e uma string não vazia é true.

Qual o retorno de console.log(typeof null) e o porque desse retorno?
Em JS null é do tipo objeto, isso pode acarretar em bugs caso você não se atente a isso, como é uma definição que vem desde o início do JS, ele não alteraram e criaram um próprio tipo null para não quebrar sistemas com versões legadas.

Quando ocorre conversão implícita no JS?
Quando tentamos comparar os valores contidos dentro de variáveis mesmo que elas não possuam o mesmo tipo mas o valor em si sejam "iguais", exemplo, 456 == "456", ou quando tentamos somar uma string com um número, o JS converte o número em string.

Como converter uma string para um número usando o operador de adição '+'?
Para convertemos uma string em número usamos o operador de adição antes da string, exemplo: + "12" * + "34". Apesar de ser possível dessa forma, não é muito comum e também não é considerado uma boa prática.